apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: postgres-test
data:
  init.sql: |
    -- Create sample database schema
    CREATE SCHEMA IF NOT EXISTS ecommerce;
    CREATE SCHEMA IF NOT EXISTS analytics;
    
    -- Create tables in ecommerce schema
    CREATE TABLE IF NOT EXISTS ecommerce.customers (
        customer_id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        first_name VARCHAR(100),
        last_name VARCHAR(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS ecommerce.products (
        product_id SERIAL PRIMARY KEY,
        sku VARCHAR(50) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        price DECIMAL(10, 2),
        category VARCHAR(100),
        stock_quantity INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS ecommerce.orders (
        order_id SERIAL PRIMARY KEY,
        customer_id INTEGER REFERENCES ecommerce.customers(customer_id),
        order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status VARCHAR(50) DEFAULT 'pending',
        total_amount DECIMAL(10, 2),
        shipping_address TEXT
    );
    
    CREATE TABLE IF NOT EXISTS ecommerce.order_items (
        item_id SERIAL PRIMARY KEY,
        order_id INTEGER REFERENCES ecommerce.orders(order_id),
        product_id INTEGER REFERENCES ecommerce.products(product_id),
        quantity INTEGER NOT NULL,
        unit_price DECIMAL(10, 2),
        line_total DECIMAL(10, 2)
    );
    
    -- Create tables in analytics schema
    CREATE TABLE IF NOT EXISTS analytics.page_views (
        view_id SERIAL PRIMARY KEY,
        session_id VARCHAR(100),
        user_id INTEGER,
        page_url VARCHAR(500),
        view_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        referrer VARCHAR(500),
        device_type VARCHAR(50)
    );
    
    CREATE TABLE IF NOT EXISTS analytics.user_events (
        event_id SERIAL PRIMARY KEY,
        user_id INTEGER,
        event_type VARCHAR(100),
        event_data JSONB,
        event_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Create indexes
    CREATE INDEX idx_customers_email ON ecommerce.customers(email);
    CREATE INDEX idx_orders_customer ON ecommerce.orders(customer_id);
    CREATE INDEX idx_orders_date ON ecommerce.orders(order_date);
    CREATE INDEX idx_page_views_session ON analytics.page_views(session_id);
    CREATE INDEX idx_user_events_user ON analytics.user_events(user_id);
    
    -- Insert sample data
    INSERT INTO ecommerce.customers (email, first_name, last_name) VALUES
    ('john.doe@example.com', 'John', 'Doe'),
    ('jane.smith@example.com', 'Jane', 'Smith'),
    ('bob.johnson@example.com', 'Bob', 'Johnson');
    
    INSERT INTO ecommerce.products (sku, name, description, price, category, stock_quantity) VALUES
    ('LAPTOP-001', 'ThinkPad X1 Carbon', 'Business laptop with 14-inch display', 1499.99, 'Electronics', 10),
    ('PHONE-001', 'iPhone 15 Pro', 'Latest iPhone with titanium design', 999.99, 'Electronics', 25),
    ('BOOK-001', 'Clean Code', 'A Handbook of Agile Software Craftsmanship', 39.99, 'Books', 100);
    
    INSERT INTO ecommerce.orders (customer_id, status, total_amount, shipping_address) VALUES
    (1, 'completed', 1539.98, '123 Main St, New York, NY 10001'),
    (2, 'pending', 999.99, '456 Oak Ave, Los Angeles, CA 90001');
    
    INSERT INTO ecommerce.order_items (order_id, product_id, quantity, unit_price, line_total) VALUES
    (1, 1, 1, 1499.99, 1499.99),
    (1, 3, 1, 39.99, 39.99),
    (2, 2, 1, 999.99, 999.99);
    
    -- Create views
    CREATE VIEW ecommerce.customer_order_summary AS
    SELECT 
        c.customer_id,
        c.email,
        COUNT(DISTINCT o.order_id) as total_orders,
        SUM(o.total_amount) as lifetime_value
    FROM ecommerce.customers c
    LEFT JOIN ecommerce.orders o ON c.customer_id = o.customer_id
    GROUP BY c.customer_id, c.email;
    
    -- Grant permissions (for the ingestion user)
    GRANT USAGE ON SCHEMA ecommerce TO PUBLIC;
    GRANT USAGE ON SCHEMA analytics TO PUBLIC;
    GRANT SELECT ON ALL TABLES IN SCHEMA ecommerce TO PUBLIC;
    GRANT SELECT ON ALL TABLES IN SCHEMA analytics TO PUBLIC;